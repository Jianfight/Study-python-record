习题3：
 + 加号（plus）加法运算
 -减号（minus）减法运算
 /斜杠（slash）除法运算 在进行除法运算时（Python2中）整数与整数相除只会显示结果的整数位，小数位不会显示，但当被除数或除数中有一个为浮点数时，计算结果就会为浮点数。
 在python3中：/代表除法其结果为浮点数，即使整除也显示为.0，
 //  在python3中也是一种除法，称为地板除，其结果只取整数位，即使无法整除，也只显示整数位。
 *星号（asterisk）乘法运算
 %百分号（percent）求余数
 <小于号（less-than）
 >大于号（greater-than）
 <=小于等于号（less-than-equal）
 >=大于等于号（greater-than-equal）
 == 等于号（equal） 在python中 = 是用来进行赋值的
 <>不等于号 != 

习题5：
  格式化字符
%r 全部打印出来
%c 字符及其ASCALL码
%s 字符串
%d 有符号整数（十进制）
%u 无符号整数（十进制）
%f 浮点数（用小数点表示）%.xf x表示小数需要保留的位数。在保留位数的同时会对x的后一位进行四舍五入。
%e 浮点数（科学计数法）
%E 浮点数（科学计数法，用E代替e）
%g 浮点数（根据值的大小采用%e或者%f）
在输出时在%和d之间加入数字表示添加相应个数的占位符（想用0代替空白占位符在加入的数字前添加0），在数字前添加-表示输出数字左对齐。

%o 无符号整数（八进制）
%x 无符号整数（十六进制）
%X 无符号整数（十六进制大写字符）
%p 指针（用十六进制打印值的内存地址）
%% 表示对%字符的转译。其输出为%。

习题6：
在print时可以使用 + 连接两个变量或者多个变量。

习题7：
  在相邻的两个print 输出中，在第一个结尾添加“，”可以将两个文本连接起来

习题9：
  让字符串扩展到多行的方法,在需要新起一行的字符串之前加上 \n；使用三引号""" """之间可以放入任意多行的文字。

习题10：
  转义序列
\\ 反斜杠
\' 单引号
\" 双引号
\a 相令符
\b 退格符
\n 换行符
\r 回车符
\t 水平制表符
\v 垂直制表符
\f 进纸符
r''表示''内部的字符串默认不转义,例如print(r'I'm ok.'),那么I'm中得'就不会被转译

\N(name) Unicode 数据库中的字符名，其中 name 就是它的名字
\uxxxx 值为16位十六进制xxxx的字符
\Uxxxxxxxx 值为32位十六进制xxxx的字符
\ooo 值为八进制值ooo的字符
\xhh 值为十六进制数hh的字符

习题11：
 raw_input () 函数是返回用户输入的字符串
 input （） 函数是将用户输入的字符串变为python的表达式并且可以按照表达式进行计算，返回的是整型或者浮点型，其可以看作是将 raw_input和eval的结合。与eval相对应的为repr函数，其为将变量或者是表达式转换为字符串。
 转化为整形使用的函数为 int() 转化为浮点型的函数为float（）

习题12：
在window中  python -m pydoc xxxx 是以一种在命令终端之中查询xxxx是什么作用的一种方法，有时解释过长时 可以输入q来停止解释。

习题15：
python中的open 函数
 open(name,[,mode[,buffering]])  文件名是必须的，模式和缓冲参数是可选的
 r 为读模式，w 为写模式，a为追加模式，b 为二进制模式，+ 为读/写模式。如果不做说明一般情况下系统迷人的是读
 例如 a = open(a.txt, 'r')             a = open(a.txt, 'w')
      a.read()      # 读全部文件       a.write('abcdefghijklmn')
      a.readline()   #逐行的读文件     a.close()   # 调用close方法关闭文件，有打开就需要有关闭
      a.close                          a.truncate   #清空文件 

习题17：
 len()函数返回字符串长度。    在widows下的type命令是显示文件内容的。

习题18：
定义函数的注意事项：

1.函数定义是以 def 开始的吗？
2.函数名称是以字符和下划线_组成的吗？（可以有数字，但是数字不要出现在函数名称的开头）
3.函数名称是不是紧跟着括号（ ？
4.括号里是否包含参数？多个参数是否以逗号隔开？
5.参数名称是否有重复？（不能使用重复的参数名）
6.紧跟着参数的是不是括号和冒号 ）：？
7.紧跟着函数定义的代码是否使用了4个空格的缩进（indent）？
8.函数结束的位置是否取消了缩进（dedent）？

当运行（run）/调用(call)/使用（use）一个函数时，需要检查的有：

1.调用函数时是否使用了函数的名称？
2.函数的名称是否紧跟着（ ？
3.括号后有无参数？多个参数是否以逗号隔开？
4.函数是否以 ）结尾？

习题20：
 当我们在读取文件的时候，使用read命令，在读取结束后，读取指针将会位于文件的末尾，如果我们需要再次读取文件，应该使用seek命令将读取指针调回到文件的开头，否则我们读取的为空。
 使用readline时，在读完一行时，读取指针会位于改行的末尾，当再使用reading命令时，将会从下一行读起。
 f.seek(offset[, whence])  offset--开始的偏移量，代表需要移动偏移的字节数。
                           whence--默认值为0，表示从哪个位置开始偏移，0代表从文件开头，1代表从文件当前位置开始算起，2代表从文件末尾算起。
 +=符号的作用：其作用类似于a = a + 1 可以简写为： a += 1
在 Windows powershell 中可以使用 get-content 查看文本文件。

习题25：
当我们在定义函数时，可以再定义语句下方使用"""....."""的方式来给这个函数添加文档注解。在Python中调用这个模组后使用help(模组的名称)可以查看我们编写的文档注解。

使用文本变量.split(' ')可以将文本中的每个单词拆分出来。
使用sorted(变量名称）可以将拆分后的文本变量进行排序。（计算机默认按照26个字母的顺序对问题进行排序）
变量.pop(*)可以将选择该变量第*个位置的数据。（计算机默认从0开始计数）

习题32：
在Python中 def (定义函数）if (判断语句) for (循环语句）都需要在首句末尾使用“：”并且其以下的内容需要缩进四个字符
range函数 range(start, end, scan) start表示开始的位置（计算机默认从0开始），end表示结束的位置但是不包括end，scan表示跳跃的间距。可以理解为是一个含首不含尾的循环

习题33：
序数与基数 基数可以看做是序数减一。

习题35：
python 中的exit函数分为两种，一种是sy
s.exit() 一种是os.exit()，os.exit()的退出方式会直接将python程序终止，但sys.exit()的退出方式会引发systemExit异常，（0）为正常退出其他数字可以抛出异常。os与sys的介绍参见后面的网址(http://blog.csdn.net/u012965373/article/details/51331056)

习题36：
IF语句的规则：
1.每一个“if”语句必须含一个else。
2.如果这个else永远都不应该执行到，吟哦日因为他本身没有任何意义，那你必须在else语句的后面使用一个叫做die的函数，让它打印出错误信息并且死给你看，这样你可以找到更多的错误。
3.“if”语句的嵌套不要超过两层，最好尽量只保持一层，这意味着如果你在IF里面又有了一个if，那就需要将第二个if放入另一个函数中。
4.将“if”语句当做段落来对待，其中的每一个if,elif,else组合就跟一个段落的句子组合一样。在这种的最前面和最后面留一个空行以作区分。
5.布尔测试应该很简单，如果他们复杂的话，需要将他们的运算事先放到一个变量里，并且为变量取一个名字。

循环的规则：
1.只有在循环永不停止时使用“while”循环，这意味着可能永远都用不到。这条只有在python中成立，在其他语言之中另当别论。
2.其他类型的循环都使用“for循环”，尤其是在循环的对象数量固定或者有限的情况下。

调试（debug）的小技巧：
1.不要使用“debugger”。 Debugger所做的就相当于对病人进行全身扫描。你并不会得到某方面的有用信息，而且你会发现它输出的信息太多，而且大部分没有用，或者只会让人感到更加的困惑。
2.最好的调试程序的方法是使用print在各个你想要检查的关键变量打印出来，从而检查哪里是否有错。
3.让程序一部分一部分地运行起来。不要等一个很长的脚本写完之后再去运行它。写一点，运行一点，再修改一点。

习题37：
Python中的del命令是用来删除，但是del语句作用在变量上，而不是数据上。列表中本身是不包含数据的，列表中记录的是一个又一个的变量，变量中存储的是数据。del在对列表使用时是删除的列表里的变量而不是数据。

Python中的as命令可以用来改变被导入模组在当前模组中的名称，而不是sys.modules中的名称。可以使用import as,例如：import some as other

Python中的global语句是在函数中声明全局变量的，使用之后再函数内改变一个变量的数值之后，在函数外相同变量名的的数值也会改变。使用方法：global x, y, z。可以声明一个也可以声明好几个。

Python中的with-as语法，当Python执行with的语句时，会调用enter函数，然后把该函数return的值传递给as后指定的变量。之后，Python会执行下面的do somenthing的语句块。最后不论在该语句快出现了什么异常，都会在离开时执行exit。(http://zhoutall.com/archives/325)
with controlled_execution() as thing:
	do something

Python中assert断言是声明其布尔值必须为真的判定，如果发生异常就说明表达式为假，其作用是用来测试表达式，返回的值为假就会触发异常。其的作用就等价于if not espression:  raise AssertionError.

Python中pass的作用是在编写程序时当执行语句的思路还没有完成，这时可以使用pass语句来占位，在特别的时候用来保证格式或者是语义的完整性。

Python中yield的作用是返回一个生成器，生成器是一个可以进行迭代的变量，生成器类似于迭代器但是它不会像迭代器那样在打开的时候将迭代器的全部内容都导入内存中，生成器在生成值后会自动挂起并暂停他们的执行和状态，他的本地变量将保存状态信息，这些信息在函数恢复时将再度有效。（https://segmentfault.com/a/1190000002900850）

Python中break语句用来终止循环语句，即循环条件没有False条件或者序列还没有被完全递归完，也会终止循环。（http://www.runoob.com/python/python-break-statement.html）

Python中try...except...else语法是Python中常用的异常处理方法，
try:
    <语句>
except <name>：
    <语句>          #如果在try部份引发了名为'name'的异常，则执行这段代码
else:
    <语句>          #如果没有异常发生，则执行这段代码
(http://blog.csdn.net/u013088799/article/details/39100881)

Python中class是类，具体用法以后进行补充。

Python中exec语句用来执行存储在字符串或文件中的python语句，但是其并没有返回值。
eval_r(str,[globals [locals]])函数将字符串str当成有效的python表达式来求值，并返回计算结果。
execfile(filename [,globals [,locals]])函数可以用来执行一个文件。

Python中raise语句可以用来抛出异常。可一在try：的语句中使用raise来抛出异常，except接收到异常后跳出try,执行下一步程序。

Python中continue语句的功能与break类似，但break是跳出整个循环，continue是跳出当前的循环，进行下一个循环。（http://www.runoob.com/python/python-continue-statement.html）

python中的列表：
list：
list = [ , , , , ,         ]
list.append(yuansu) 自动向列表末尾添加元素
list.insert(x,yuansu) 根据相应的位置向列表中添加元素，如该位置已有元素则原元素向后移动
list.pop() pop函数用于删除列表末尾的元素，pop(x)删除位置为X的元素
列表中可以嵌套列表，其可以看作是一个二维数组。

tuple: 其为有序列表叫做元组，其一旦定义就不可修改，其没有append和insert函数，除非在元组中嵌套一个普通列表，那也仅仅只能修改普通列表中的元素，无法修改元组中的其他元素。
因为其不可变所以其对于代码来说更加安全。
tuple = ( , , , , ,       )

python中的条件判断：
if <条件判断1>:
    <执行1>
elif <条件判断2>:
    <执行2>
elif <条件判断3>:
    <执行3>
else:
    <执行4>
不要忘记:号的存在，尤其是else后面的:。

python中的循环：
for...in...循环
whlie循环

python中的dict（dictionary字典）：
其使用 键-值（key-value）的存储方式。
dict = {"name1":value1, "name2":value2, "name3":value3, ....... }
提取时使用：dict["name"]
dict.get('name4') 该函数是用于检查name4这个键是否存在字典中。
dict.pop('name') 删除字典中相应的键和其对应的值。
dict的key对象必须是不可变对象。通过key计算存贮位置的算法称为哈希算法（Hash)。

python中的set(可以看作数学意义上无序无重合元素的集合)
其类似与字典，但是其只用key无值。
set1 = set([value1, value2, value3,  .........])
两个set可以做数学上的交集（&）或者并集（|）。
set.add(value) 可以添加元素到set中。
set.remove(value) 可以删除元素。

python中的内置函数:
abs() 绝对值函数，但是其只有一个参数。
max() 最大值函数，其可以接收任意多个参数，并返回最大的那个参数。
int() 可以将其他数据类型转换为整数。
float() 可以将其他数据类型转换为浮点型。
str() 可以将其他数据类型转换为字符串。
bool() 可以将其他数据类型转换为布尔型，其返回值为False或者True。

python中使用def来定义函数
其格式为： def 函数名（参数）:
		函数内容
函数中如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。
自定以的函数也可以返回多个值，但是多个值是以元组（tuple）的的形式输出的。
定义函数时，需要确定函数名和参数个数；如果有必要，可以先对参数的数据类型做检查；函数体内部可以用return随时返回函数结果；函数执行完毕也没有return语句时，自动return None。函数可以同时返回多个值，但其实就是一个tuple。
在定义函数时可以使用默认参数，例如function（a, n = 2）:  n = 2 的意思为将参数n默认为2，即在调用函数时如果不输入参数n,其就默认为2。一是必选参数在前，默认参数在后，否则Python的解释器会报错。二是如何设置默认参数。当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。使用默认参数有什么好处？最大的好处是能降低调用函数的难度。默认参数必须指向不变对象（其不能是列表）。
在定义函数时可以使用可变参数，在定义函数时将参数名前添加一个*号，其会将可变参数默认形成一个元组。在调用含有可变参数的函数时，如果我们提前定义了一个列表（list）或者元组（tuple）可以在调用时，在参数位置输入列表或者元组名并且在其前添加*号，表示将该列表或者元组中的每个元素都当作参数传入函数中。
在定义函数时可以使用关键字参数，在定义函数时将参数名前添加一个**号，其会将关键字参数参数默认形成一个字典（dict）。
在定义函数时可以使用命名关键字参数，例如：def person(name, age, *, city, job): 其中 *,代表一个特殊分隔符，其告诉解释器 *,后面的参数为命名关键字参数。在调用有命名关键字的函数时，必须传入参数名，否则解释器会将其默认为位置参数，导致程序出错。但当命名关键字参数有默认值时，调用函数时可以不输入参数名，直接使用默认值。
组合参数的定义顺序：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。
